Index: include/llvm/ADT/Triple.h
===================================================================
--- include/llvm/ADT/Triple.h	(revision 144800)
+++ include/llvm/ADT/Triple.h	(working copy)
@@ -104,7 +104,8 @@
     GNU,
     GNUEABI,
     EABI,
-    MachO
+    MachO,
+    ANDROIDEABI
   };
 
 private:
Index: lib/Support/Triple.cpp
===================================================================
--- lib/Support/Triple.cpp	(revision 144800)
+++ lib/Support/Triple.cpp	(working copy)
@@ -122,6 +122,7 @@
   case GNUEABI: return "gnueabi";
   case EABI: return "eabi";
   case MachO: return "macho";
+  case ANDROIDEABI: return "androideabi";
   }
 
   return "<invalid>";
@@ -380,6 +381,8 @@
     return GNU;
   else if (EnvironmentName.startswith("macho"))
     return MachO;
+  else if (EnvironmentName.startswith("androideabi"))
+    return ANDROIDEABI;
   else
     return UnknownEnvironment;
 }
Index: tools/clang/lib/Driver/Tools.cpp
===================================================================
--- tools/clang/lib/Driver/Tools.cpp	(revision 144800)
+++ tools/clang/lib/Driver/Tools.cpp	(working copy)
@@ -524,6 +524,7 @@
   } else {
     // Select the default based on the platform.
     switch(Triple.getEnvironment()) {
+    case llvm::Triple::ANDROIDEABI:
     case llvm::Triple::GNUEABI:
       ABIName = "aapcs-linux";
       break;
@@ -597,6 +598,15 @@
         // EABI is always AAPCS, and if it was not marked 'hard', it's softfp
         FloatABI = "softfp";
         break;
+      case llvm::Triple::ANDROIDEABI: {
+        StringRef ArchName =
+          getLLVMArchSuffixForARM(getARMTargetCPU(Args, Triple));
+        if (ArchName.startswith("v7"))
+          FloatABI = "softfp";
+        else
+          FloatABI = "soft";
+        break;
+      }
       default:
         // Assume "soft", but warn the user we are guessing.
         FloatABI = "soft";
@@ -1112,6 +1122,14 @@
   // FIXME: Implement custom jobs for internal actions.
   CmdArgs.push_back("-cc1");
 
+  if (Args.hasArg(options::OPT_faddress_sanitizer)) {
+    CmdArgs.push_back("-DADDRESS_SANITIZER=1");
+  }
+
+  if (Args.hasArg(options::OPT_faddress_sanitizer)) {
+    CmdArgs.push_back("-DADDRESS_SANITIZER=1");
+  }
+
   // Add the "effective" target triple.
   CmdArgs.push_back("-triple");
   std::string TripleStr = getToolChain().ComputeEffectiveClangTriple(Args);
@@ -2303,6 +2321,84 @@
   Args.ClaimAllArgs(options::OPT_emit_llvm);
 }
 
+static void addLibasan(const ToolChain &TC, const ArgList &Args,
+                       ArgStringList &CmdArgs) {
+  const char *libasan_from_env = getenv("ASAN_LIB");  // temporary
+  std::string libasan;
+  if (libasan_from_env) {
+    libasan = libasan_from_env;
+  } else {
+    libasan = TC.getDriver().Dir + "/../lib/libasan";
+    const llvm::Triple& triple = TC.getTriple();
+    llvm::Triple::ArchType archType = triple.getArch();
+    llvm::Triple::EnvironmentType environmentType = triple.getEnvironment();
+    if (archType == llvm::Triple::x86)
+      libasan += "32.a";
+    else if (archType == llvm::Triple::x86_64)
+      libasan += "64.a";
+    else if (archType == llvm::Triple::arm &&
+        environmentType == llvm::Triple::GNUEABI)
+      libasan += "_arm.a";
+    else if (archType == llvm::Triple::arm &&
+        environmentType == llvm::Triple::ANDROIDEABI)
+      libasan += "_android.a";
+    else
+      libasan += "_arch_unsupported.a";
+  }
+  CmdArgs.push_back(Args.MakeArgString(libasan));
+}
+
+static void addAsanForLinux(const ToolChain &TC, const ArgList &Args,
+                            ArgStringList &CmdArgs) {
+  addLibasan(TC, Args, CmdArgs);
+  // Android does not have a libpthread; everything is included in libc.
+  bool is_android = TC.getArch() == llvm::Triple::arm &&
+    TC.getTriple().getEnvironment() == llvm::Triple::ANDROIDEABI;
+  if (!is_android)
+    CmdArgs.push_back("-lpthread");
+  CmdArgs.push_back("-ldl");
+  CmdArgs.push_back("-export-dynamic");
+  TC.AddCXXStdlibLibArgs(Args, CmdArgs);
+}
+
+const char *AsanIfaceFns[13] = {
+  "___asan_init",
+  "___asan_report_load1",
+  "___asan_report_load2",
+  "___asan_report_load4",
+  "___asan_report_load8",
+  "___asan_report_load16",
+  "___asan_report_store1",
+  "___asan_report_store2",
+  "___asan_report_store4",
+  "___asan_report_store8",
+  "___asan_report_store16",
+  "___asan_register_global",
+  "___asan_register_globals",
+};
+
+const int AsanIfaceFnsSize = sizeof(AsanIfaceFns) / sizeof(char*);
+
+static void addAsanForDarwinExe(const ToolChain &TC, const ArgList &Args,
+                                ArgStringList &CmdArgs) {
+    addLibasan(TC, Args, CmdArgs);
+    CmdArgs.push_back("-lpthread");
+    CmdArgs.push_back("-ldl");
+    // TODO(glider): do we need to always depend on Foundation?
+    CmdArgs.push_back("-framework");
+    CmdArgs.push_back("Foundation");
+    TC.AddCXXStdlibLibArgs(Args, CmdArgs);
+}
+
+static void addAsanForDarwinDynamicLib(const ToolChain &unused_TC,
+                                       const ArgList &Args,
+                                       ArgStringList &CmdArgs) {
+  for (int index = 0; index < AsanIfaceFnsSize; ++index) {
+    CmdArgs.push_back("-U");
+    CmdArgs.push_back(Args.MakeArgString(AsanIfaceFns[index]));
+  }
+}
+
 void ClangAs::ConstructJob(Compilation &C, const JobAction &JA,
                            const InputInfo &Output,
                            const InputInfoList &Inputs,
@@ -2464,6 +2560,15 @@
     }
   }
 
+  // AddressSanitizer support.
+  if (isa<LinkJobAction>(JA)) {
+    if (Args.hasArg(options::OPT_faddress_sanitizer) &&
+        !Args.hasArg(options::OPT_shared)) {
+      addAsanForLinux(getToolChain(), Args, CmdArgs);
+    }
+  }
+
+
   const std::string customGCCName = D.getCCCGenericGCCName();
   const char *GCCName;
   if (!customGCCName.empty())
@@ -3545,6 +3650,17 @@
 
   Args.AddAllArgs(CmdArgs, options::OPT_L);
 
+  // AddressSanitizer support.
+  if (Args.hasArg(options::OPT_faddress_sanitizer)) {
+    if (!Args.hasArg(options::OPT_dynamiclib) &&
+        !Args.hasArg(options::OPT_bundle)) {
+      addAsanForDarwinExe(getToolChain(), Args, CmdArgs);
+    }
+    if (Args.hasArg(options::OPT_dynamiclib) ||
+        Args.hasArg(options::OPT_bundle)) {
+      addAsanForDarwinDynamicLib(getToolChain(), Args, CmdArgs);
+    }
+  }
   if (Args.hasArg(options::OPT_fopenmp))
     // This is more complicated in gcc...
     CmdArgs.push_back("-lgomp");
@@ -3583,6 +3699,8 @@
     getDarwinToolChain().AddLinkRuntimeLibArgs(Args, CmdArgs);
   }
 
+
+
   if (!Args.hasArg(options::OPT_A) &&
       !Args.hasArg(options::OPT_nostdlib) &&
       !Args.hasArg(options::OPT_nostartfiles)) {
@@ -4425,6 +4543,12 @@
 
   AddLinkerInputs(ToolChain, Inputs, Args, CmdArgs);
 
+  // AddressSanitizer support.
+  if (Args.hasArg(options::OPT_faddress_sanitizer) &&
+      !Args.hasArg(options::OPT_shared)) {
+    addAsanForLinux(getToolChain(), Args, CmdArgs);
+  }
+
   if (D.CCCIsCXX && !Args.hasArg(options::OPT_nostdlib)) {
     bool OnlyLibstdcxxStatic = Args.hasArg(options::OPT_static_libstdcxx) &&
       !Args.hasArg(options::OPT_static);
Index: tools/clang/lib/Driver/ToolChains.cpp
===================================================================
--- tools/clang/lib/Driver/ToolChains.cpp	(revision 144800)
+++ tools/clang/lib/Driver/ToolChains.cpp	(working copy)
@@ -1161,7 +1161,10 @@
     SmallVectorImpl<StringRef> &Triples) {
   if (HostArch == llvm::Triple::arm || HostArch == llvm::Triple::thumb) {
     static const char *const ARMLibDirs[] = { "/lib" };
-    static const char *const ARMTriples[] = { "arm-linux-gnueabi" };
+    static const char *const ARMTriples[] = {
+      "arm-linux-gnueabi",
+      "arm-linux-androideabi"
+    };
     LibDirs.append(ARMLibDirs, ARMLibDirs + llvm::array_lengthof(ARMLibDirs));
     Triples.append(ARMTriples, ARMTriples + llvm::array_lengthof(ARMTriples));
   } else if (HostArch == llvm::Triple::x86_64) {
Index: tools/clang/lib/CodeGen/TargetInfo.cpp
===================================================================
--- tools/clang/lib/CodeGen/TargetInfo.cpp	(revision 144800)
+++ tools/clang/lib/CodeGen/TargetInfo.cpp	(working copy)
@@ -2334,7 +2334,7 @@
 
   bool isEABI() const {
     StringRef Env = getContext().getTargetInfo().getTriple().getEnvironmentName();
-    return (Env == "gnueabi" || Env == "eabi");
+    return (Env == "gnueabi" || Env == "eabi" || Env == "androideabi");
   }
 
 private:
