Index: include/llvm/Transforms/Instrumentation.h
===================================================================
--- include/llvm/Transforms/Instrumentation.h	(revision 135664)
+++ include/llvm/Transforms/Instrumentation.h	(working copy)
@@ -31,6 +31,9 @@
 ModulePass *createGCOVProfilerPass(bool EmitNotes = true, bool EmitData = true,
                                    bool Use402Format = false);
 
+// Insert AddressSanitizer (address sanity checking) instrumentation
+ModulePass *createAddressSanitizerPass();
+
 } // End llvm namespace
 
 #endif
Index: include/llvm/InitializePasses.h
===================================================================
--- include/llvm/InitializePasses.h	(revision 135664)
+++ include/llvm/InitializePasses.h	(working copy)
@@ -96,6 +96,7 @@
 void initializeEdgeProfilerPass(PassRegistry&);
 void initializePathProfilerPass(PassRegistry&);
 void initializeGCOVProfilerPass(PassRegistry&);
+void initializeAddressSanitizerPass(PassRegistry&);
 void initializeEarlyCSEPass(PassRegistry&);
 void initializeExpandISelPseudosPass(PassRegistry&);
 void initializeFindUsedTypesPass(PassRegistry&);
Index: include/llvm/Support/PassManagerBuilder.h
===================================================================
--- include/llvm/Support/PassManagerBuilder.h	(revision 135664)
+++ include/llvm/Support/PassManagerBuilder.h	(working copy)
@@ -24,6 +24,7 @@
 #include "llvm/Analysis/Verifier.h"
 #include "llvm/Target/TargetLibraryInfo.h"
 #include "llvm/Transforms/Scalar.h"
+#include "llvm/Transforms/Instrumentation.h"
 #include "llvm/Transforms/IPO.h"
 
 namespace llvm {
@@ -222,6 +223,8 @@
       MPM.add(createGVNPass());                 // Remove redundancies
     MPM.add(createMemCpyOptPass());             // Remove memcpy / form memset
     MPM.add(createSCCPPass());                  // Constant prop with SCCP
+
+    MPM.add(createAddressSanitizerPass());      // AddressSanitizer
     
     // Run instcombine after redundancy elimination to exploit opportunities
     // opened up by them.
Index: lib/Transforms/Instrumentation/Instrumentation.cpp
===================================================================
--- lib/Transforms/Instrumentation/Instrumentation.cpp	(revision 135664)
+++ lib/Transforms/Instrumentation/Instrumentation.cpp	(working copy)
@@ -24,6 +24,7 @@
   initializeOptimalEdgeProfilerPass(Registry);
   initializePathProfilerPass(Registry);
   initializeGCOVProfilerPass(Registry);
+  initializeAddressSanitizerPass(Registry);
 }
 
 /// LLVMInitializeInstrumentation - C binding for
Index: lib/Transforms/Instrumentation/CMakeLists.txt
===================================================================
--- lib/Transforms/Instrumentation/CMakeLists.txt	(revision 135664)
+++ lib/Transforms/Instrumentation/CMakeLists.txt	(working copy)
@@ -1,4 +1,5 @@
 add_llvm_library(LLVMInstrumentation
+  AddressSanitizer.cpp
   EdgeProfiling.cpp
   GCOVProfiling.cpp
   Instrumentation.cpp
Index: tools/clang/include/clang/Driver/Options.td
===================================================================
--- tools/clang/include/clang/Driver/Options.td	(revision 135664)
+++ tools/clang/include/clang/Driver/Options.td	(working copy)
@@ -258,6 +258,7 @@
 def faccess_control : Flag<"-faccess-control">, Group<f_Group>;
 def fallow_unsupported : Flag<"-fallow-unsupported">, Group<f_Group>;
 def fapple_kext : Flag<"-fapple-kext">, Group<f_Group>;
+def fasan : Flag<"-fasan">, Group<f_Group>;
 def fasm : Flag<"-fasm">, Group<f_Group>;
 
 def fasm_blocks : Flag<"-fasm-blocks">, Group<f_Group>;
Index: tools/clang/lib/Driver/Tools.cpp
===================================================================
--- tools/clang/lib/Driver/Tools.cpp	(revision 135664)
+++ tools/clang/lib/Driver/Tools.cpp	(working copy)
@@ -1049,6 +1049,12 @@
   // FIXME: Implement custom jobs for internal actions.
   CmdArgs.push_back("-cc1");
 
+  if (Args.hasArg(options::OPT_fasan)) {
+    CmdArgs.push_back("-DADDRESS_SANITIZER=1");
+    CmdArgs.push_back("-mllvm");
+    CmdArgs.push_back("-asan=1");
+  }
+
   // Add the "effective" target triple.
   CmdArgs.push_back("-triple");
   std::string TripleStr = getToolChain().ComputeEffectiveClangTriple(Args);
@@ -3250,6 +3256,37 @@
 
   Args.AddAllArgs(CmdArgs, options::OPT_L);
 
+  // AddressSanitizer Support.
+  if (Args.hasArg(options::OPT_fasan) && !Args.hasArg(options::OPT_dynamiclib)) {
+    const char *libasan_from_env = getenv("ASAN_LIB");  // temporary
+    std::string libasan;
+    if (libasan_from_env) {
+      libasan = libasan_from_env;
+    } else {
+      libasan = getToolChain().getDriver().Dir + "/../lib/libasan";
+      if (getToolChain().getArch() == llvm::Triple::x86)
+        libasan += "32.a";
+      else
+        libasan += "64.a";
+    }
+    CmdArgs.push_back(Args.MakeArgString(libasan));
+    CmdArgs.push_back("-lpthread");
+    CmdArgs.push_back("-ldl");
+    CmdArgs.push_back("-U");
+    CmdArgs.push_back("_malloc_default_purgeable_zone");
+    CmdArgs.push_back("-U");
+    CmdArgs.push_back("_malloc_zone_memalign");
+    // TODO(glider): do we need to always depend on Foundation?
+    CmdArgs.push_back("-framework");
+    CmdArgs.push_back("Foundation");
+    getToolChain().AddCXXStdlibLibArgs(Args, CmdArgs);
+  }
+  if (Args.hasArg(options::OPT_fasan) && Args.hasArg(options::OPT_dynamiclib)) {
+    CmdArgs.push_back("-U");
+    CmdArgs.push_back("___asan_init");
+  }
+
+
   if (Args.hasArg(options::OPT_fopenmp))
     // This is more complicated in gcc...
     CmdArgs.push_back("-lgomp");
@@ -3288,6 +3325,8 @@
     getDarwinToolChain().AddLinkRuntimeLibArgs(Args, CmdArgs);
   }
 
+
+
   if (!Args.hasArg(options::OPT_A) &&
       !Args.hasArg(options::OPT_nostdlib) &&
       !Args.hasArg(options::OPT_nostartfiles)) {
@@ -4077,6 +4116,27 @@
 
   AddLinkerInputs(ToolChain, Inputs, Args, CmdArgs);
 
+  // AddressSanitizer Support.
+  if (Args.hasArg(options::OPT_fasan) && !Args.hasArg(options::OPT_shared)) {
+    const char *libasan_from_env = getenv("ASAN_LIB");  // temporary
+    std::string libasan;
+    if (libasan_from_env) {
+      libasan = libasan_from_env;
+    } else {
+      libasan = ToolChain.getDriver().Dir + "/../lib/libasan";
+      if (ToolChain.getArch() == llvm::Triple::x86)
+        libasan += "32.a";
+      else
+        libasan += "64.a";
+    }
+    CmdArgs.push_back(Args.MakeArgString(libasan));
+    CmdArgs.push_back("-lpthread");
+    CmdArgs.push_back("-ldl");
+    CmdArgs.push_back("-export-dynamic");
+
+    ToolChain.AddCXXStdlibLibArgs(Args, CmdArgs);
+  }
+
   if (D.CCCIsCXX && !Args.hasArg(options::OPT_nostdlib)) {
     ToolChain.AddCXXStdlibLibArgs(Args, CmdArgs);
     CmdArgs.push_back("-lm");
