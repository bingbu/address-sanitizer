Index: lib/CodeGen/AsmPrinter/ARMException.cpp
===================================================================
--- lib/CodeGen/AsmPrinter/ARMException.cpp	(revision 142659)
+++ lib/CodeGen/AsmPrinter/ARMException.cpp	(working copy)
@@ -50,36 +50,36 @@
 /// being emitted immediately after the function entry point.
 void ARMException::BeginFunction(const MachineFunction *MF) {
   Asm->OutStreamer.EmitFnStart();
-  if (Asm->MF->getFunction()->needsUnwindTableEntry())
-    Asm->OutStreamer.EmitLabel(Asm->GetTempSymbol("eh_func_begin",
-                                                  Asm->getFunctionNumber()));
+  // if (Asm->MF->getFunction()->needsUnwindTableEntry())
+  //   Asm->OutStreamer.EmitLabel(Asm->GetTempSymbol("eh_func_begin",
+  //                                                 Asm->getFunctionNumber()));
 }
 
 /// EndFunction - Gather and emit post-function exception information.
 ///
 void ARMException::EndFunction() {
-  if (!Asm->MF->getFunction()->needsUnwindTableEntry())
-    Asm->OutStreamer.EmitCantUnwind();
-  else {
-    Asm->OutStreamer.EmitLabel(Asm->GetTempSymbol("eh_func_end",
-                                                  Asm->getFunctionNumber()));
+  // if (!Asm->MF->getFunction()->needsUnwindTableEntry())
+  //   Asm->OutStreamer.EmitCantUnwind();
+  // else {
+  //   Asm->OutStreamer.EmitLabel(Asm->GetTempSymbol("eh_func_end",
+  //                                                 Asm->getFunctionNumber()));
 
-    // Emit references to personality.
-    if (const Function * Personality =
-        MMI->getPersonalities()[MMI->getPersonalityIndex()]) {
-      MCSymbol *PerSym = Asm->Mang->getSymbol(Personality);
-      Asm->OutStreamer.EmitSymbolAttribute(PerSym, MCSA_Global);
-      Asm->OutStreamer.EmitPersonality(PerSym);
-    }
+  //   // Emit references to personality.
+  //   if (const Function * Personality =
+  //       MMI->getPersonalities()[MMI->getPersonalityIndex()]) {
+  //     MCSymbol *PerSym = Asm->Mang->getSymbol(Personality);
+  //     Asm->OutStreamer.EmitSymbolAttribute(PerSym, MCSA_Global);
+  //     Asm->OutStreamer.EmitPersonality(PerSym);
+  //   }
 
-    // Map all labels and get rid of any dead landing pads.
-    MMI->TidyLandingPads();
+  //   // Map all labels and get rid of any dead landing pads.
+  //   MMI->TidyLandingPads();
 
-    Asm->OutStreamer.EmitHandlerData();
+  //   Asm->OutStreamer.EmitHandlerData();
 
-    // Emit actual exception table
-    EmitExceptionTable();
-  }
+  //   // Emit actual exception table
+  //   EmitExceptionTable();
+  // }
 
   Asm->OutStreamer.EmitFnEnd();
 }
Index: lib/Target/ARM/MCTargetDesc/ARMMCAsmInfo.cpp
===================================================================
--- lib/Target/ARM/MCTargetDesc/ARMMCAsmInfo.cpp	(revision 142659)
+++ lib/Target/ARM/MCTargetDesc/ARMMCAsmInfo.cpp	(working copy)
@@ -19,7 +19,7 @@
 cl::opt<bool>
 EnableARMEHABI("arm-enable-ehabi", cl::Hidden,
   cl::desc("Generate ARM EHABI tables"),
-  cl::init(false));
+  cl::init(true));
 
 
 static const char *const arm_asm_table[] = {
