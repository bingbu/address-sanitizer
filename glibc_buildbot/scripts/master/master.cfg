# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import sys
sys.path.append('../scripts/common')
sys.path.append('../scripts/master')
import slavepasswd

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

slaves = [
  'glibc-slave1',
]

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave(slave, slavepasswd.slave_password()) for slave in slaves]

c['slavePortnum'] = 9991

####### CHANGESOURCES

from buildbot.changes.svnpoller import GitPoller
git_poller = GitPoller(
                   'git://sourceware.org/git/glibc.git',
                   pollinterval=120, # seconds
                   workdir='gitpoller-workdir',
                   branch='master',
)
c['change_source'] = git_poller

####### SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import *
c['schedulers'] = []
allBuilders = [builder for slave in slaves for builder in slave['builders']]
c['schedulers'].append(SingleBranchScheduler(name='all', branch=None,
                                             treeStableTimer=2*60,
                                             builderNames=allBuilders))
c['schedulers'].append(ForceScheduler(name='force', builderNames=allBuilders,
                                      username=UserNameParameter(label="your name:<br>", size=80),
                                      reason=StringParameter(name="reason",label="reason:<br>",
                                                             required=True, size=80),
                                      revision=FixedParameter(name="revision", default=""),
                                      properties=[
                BooleanParameter(name="clobber",
                            label="clobber", default=False),

                StringParameter(name="pull_url",
                    label="optionally give a public Git pull url:<br>",
                    default="", size=80)
             ]
))

####### BUILDERS

import AnnotatedFactory
from buildbot.config import BuilderConfig

c['builders'].append(BuilderConfig(name = 'sanitizer-x86_64-linux,
                                   slavename = 'glibc-slave1',
                                   factory = AnnotatedFactory.f1)]

####### STATUS TARGETS

c['status'] = []

from buildbot.status.html import WebStatus
from buildbot.status.web.authz import Authz
authz = Authz(default_action = True,
    gracefulShutdown = True,
              forceBuild = True,
              forceAllBuilds = True,
              pingBuilder = True,
              stopBuild = True,
              stopAllBuilds = True,
              cancelPendingBuild = True,
              stopChange = True,
              cleanShutdown = True,
              showUsersPage = True)
webstatus = WebStatus(http_port=8080, authz=authz)
c['status'].append(webstatus)


####### PROJECT IDENTITY

c['projectName'] = "glibc"
c['projectURL'] = "http://www.gnu.org/software/libc/"

c['buildbotURL'] = "http://130.211.48.148:8080/"

####### DB URL
c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
